# -*- mode: org; coding: utf-8 -*-

* gigi

=gigi= is an experimental development environment, and programming languange

- schemish
- object capabilities
- pre-emptable actor model concurrency and evented io

It's my own =emacs=, but worse.

** Status

Don't use this yet. Someday, do.

** Building

=gigi= uses CMake as its build system.

#+begin_src bash
  git clone --recurse-submodules https://github.com/lygaret/gigi.git
  cd gigi
  cmake -B build
  cmake --build build
#+end_src

** Requirements

- CMake

*** Vendored Libraries

These libraries are awesome, gratitude to the authors!

- Garbage collection powered by [[https://github.com/wingo/whippet][=Whippet=]]
- Evented IO and Actor runtime runtime powered by [[https://docs.libuv.org/en/v1.x/][=libuv=]]
- Windowing, framebuffer and widget toolkit powered by [[https://wiki.libsdl.org/SDL3/FrontPage][=SDL3=]]

** License

Copyright (c) 2025 Jonathan Raphaelson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

See [[./COPYING]] for details.

*** Vendored Libraries

- =SDL3= is licensed under the [[https://www.libsdl.org/license.php][zlib license]]
- =libuv= is licensed under the [[https://github.com/libuv/libuv/blob/v1.x/LICENSE][MIT License]]
- =whippet= is licensed under the [[https://github.com/wingo/whippet][MIT License]]

** Reading

I have read prose, read code, and re-read prose from all over, and the following people and
projects stand out. They have all have my deepest and most sincere gratitude for writing,
building, thinking and working in the open, where I could learn from them.

As such, a reading list, in no particular order:

- [[https://letoverlambda.com/][let over lambda]] by Doug Hoyte
- [[https://github.com/carld/sassy][sassy]], an x86 assembler written in scheme; by Jonathan Kraut
- [[https://scheme.fail/][loko scheme]], an optimizing scheme compiler with a bare-metal output; by G. Weinholt
- [[https://larcenists.org][the larceny project]], a "simple and efficient" implementation of Scheme
- [[erights.org]] and the [[http://wiki.erights.org/wiki/Main_Page][eright.org wiki]]
- [[https://monte.readthedocs.io/en/latest/][the monte programming language]], a programming language inspired by the E and Python programming languages.
- [[https://spritely.institute/static/papers/spritely-core.html][spritely goblins]], a really cool distributed objects system, pushing capabilities
- the [[https://www.more-magic.net][blog of Peter Bex]], a core developer on [[https://www.call-cc.org/][chicken scheme]]
  - their articles on chicken internals are great:
  - [[https://www.more-magic.net/posts/internals-gc.html][more-magic.net: garbage collection]]
  - [[https://www.more-magic.net/posts/internals-data-representation.html][more-magic.net: data representation]]
- [[https://mitpress.mit.edu/9780262535519/the-reasoned-schemer/][The Reasoned Schemer]], by Daniel Friedman, et. al
- the [[https://web.archive.org/web/20191008012407/http://home.pipeline.com/~hbaker1/home.html][archive of H. Baker]], an ACM distinguised scientist and co-founder of Symbolics;
  - all brilliant, but my favorites so far:
  - [[https://web.archive.org/web/20191008012410/http://home.pipeline.com/~hbaker1/LazyAlloc.html][h. baker: cons should not cons it's arguments; lazy alloc]]
  - [[https://web.archive.org/web/20200223051632/http://home.pipeline.com/~hbaker1/CheneyMTA.html][h. baker: cons should not cons it's arguments pt 2; cheny on the mta]]
  - [[https://web.archive.org/web/20191008050811/http://home.pipeline.com/~hbaker1/YoungGen.html][h. baker: 'infant mortality' and generational garbage collection]]
- [[http://mumble.net/~jar/pubs/secureos/secureos.html][Jonathan A. Rees: A Security Kernel Based on the Lambda Calculus]]

*** Reading Dump

Also very interesting, but not yet categorized.

- interesting papers re: prompt application for delimited control (manipulation of the control stack)
  - [[https://okmij.org/ftp/continuations/index.html][most of oleg kiselyov's]] delemited continuations section
    - this guy's website is _fascinating_
    - also this [[http://pllab.is.ocha.ac.jp/~asai/cw2011tutorial/main-e.pdf][tutorial on shift/reset]], also by oleg kiselyov
  - [[https://www.cs.tufts.edu/~nr/cs257/archive/matthias-felleisen/prompts.pdf][theory and practice of first-class prompts]]
    - paper from Matthias Felleisen which is exactly what it sounds like
    - lots of other papers seem to reference this 𝓕 term
    #+begin_quote
    An 𝓕-application transforms the current control state into a functional abstr&ion, which we call continuation.
    #+end_quote
  - [[https://www-old.cs.utah.edu/plt/publications/pldi20-fd.pdf][compiler and runtime support for compiler marks]]
    - paper from the racket guys re: adding marks (prompts? kinda?) to racket continuations
  - [[https://www-old.cs.utah.edu/plt/publications/icfp07-fyff.pdf][Adding Delimited and Composable Control to a Production Programming Environment]]
    - writeup of original PLT scheme adding ~control~ and ~shift~ while not screwing up ~call/cc~ and ~dynamic-wind~
  - [[https://legacy.cs.indiana.edu/~dyb/pubs/monadicDC.pdf][a monadic framework for delimited continuations]]
    - kent dybvig + simon payton jones
    - the introduction is amazing, and they introduce the set of four operators I'm going to include in the VM
    - ~newPrompt~ prompts are first class, and distinct
    - ~pushPrompt~ takes a prompt, and delimits the contination of it's body at that prompt
    - ~withSubCont~
      #+begin_quote
      It captures a portion of the current continuation back to but not including the activation of
      pushPrompt with prompt p, aborts the current continuation back to and including the activation
      of pushPrompt, and invokes f, passing it an abstract value representing the captured
      subcontinuation.

      If more than one activation of pushPrompt with prompt p is still active, the most recent
      enclosing activation, i.e., the one that delimits the smallest subcontinuation, is selected.
      #+end_quote
    - ~pushSubCont~
      #+begin_quote
      evaluates its first operand to yield a subcontinuation k, then evaluates its second operand in a continuation that
      composes k with the current continuation.
      #+end_quote
    - still need to understand more the finer details around -/+F-/+, in terms of where the abort is.
      - I have a pretty good intuition re: ~call/cc~ but that's only one particular composition of operators
        #+begin_src prog
            withCont e = withSubCont p0 (λk.pushPrompt p0 (e k))
            where:
                    p0 = the top level prompt around the whole program

            callcc = λf.withCont (λk.pushSubCont k (f (reifyA k)))
            where:
                    reifyA k = λv.abort (pushSubCont k v)
                    abort e  = withCont (λ .e)
        #+end_src
      - specifically, "abort" vs. "resume" isn't clear to me
      - a lot is based on where prompts are placed (in the continuation chain) and where they're left after resumption
  - [[http://metamodular.com/SICL/call-site-optimization.pdf][call-site optimization in common lisp]]
  - [[https://lispcookbook.github.io/cl-cookbook/cl21.html#features][cl21 (unofficial proposal for cleanup of commonlisp)]]
  - [[https://web.archive.org/web/20191008050811/http://home.pipeline.com/~hbaker1/YoungGen.html][h. baker: 'infant mortality' and generational garbage collection]]
  - [[https://web.archive.org/web/20191008012410/http://home.pipeline.com/~hbaker1/LazyAlloc.html][h. baker: cons should not cons it's arguments; lazy alloc]]
  - [[https://web.archive.org/web/20200223051632/http://home.pipeline.com/~hbaker1/CheneyMTA.html][h. baker: cons should not cons it's arguments pt 2; cheny on the mta]]
  - H. Baker paper: [[https://web.archive.org/web/20180208043127/http://home.pipeline.com/~hbaker1/sigplannotices/COMFY.TXT][a comfortable set of control primitives for asm programming]]
  - [[https://www.more-magic.net/posts/internals-gc.html][chicken internals: the garbage collector]]
  - [[https://www.more-magic.net/posts/internals-data-representation.html][chicken internals: object representation]]
  - [[https://www.multicians.org/lcp.html][maclisp -- the basic hackery]] (bibop collection, 100% different than chicken, referenced)
  - [[https://www.cs.princeton.edu/~appel/papers/142.pdf][a. appel: runtime tags aren't necessary]]
  - [[http://www.cs.tufts.edu/comp/250RTS/archive/rob-pike/impl-new-TR.pdf][implementation of newsqueak - rob pike (pdf)]]
  - [[https://github.com/nornagon/jonesforth/blob/master/jonesforth.S][jonesforth/jonesforth.S at master · nornagon/jonesforth]]
  - [[https://www.reddit.com/r/Forth/comments/74v6b3/bootstrapping_a_minimal_forth_from_scratch/][Bootstrapping a minimal Forth from scratch. : Forth]]
  - [[http://www.bradrodriguez.com/papers/moving1.htm][Moving Forth: Part 1]]
  - [[http://thinking-forth.sourceforge.net/][Thinking Forth]]
  - [[http://www.osdever.net/tutorials/view/memory-management-1][Memory Management 1 on Bona Fide OS Developer]]
  - [[https://github.com/AndreaOrru/zen/blob/master/kernel/vmem.zig][zen/multiboot.zig at master · AndreaOrru/zen]]
  - [[https://github.com/sqrt57/x86-scheme][sqrt57/x86-scheme: Implementation of Scheme programming language in assembly]]
  - [[https://github.com/ktakashi/sasm/blob/master/src/sasm/arch/x64.sls][sasm/src/sasm/arch/x64.sls at master · ktakashi/sasm]]
  - [[https://github.com/siraben/zkeme80/blob/master/src/assembler.scm][zkeme80/src/assembler.scm at master · siraben/zkeme80]]
  - [[http://www.willdonnelly.net/blog/2021-05-06-scheme-x86-assembler/][A Tiny x86 Assembler Written in Scheme]]
  - [[https://blog.edfine.io/blog/2016/06/28/erlang-data-representation/][Erlang's Internal Data Representation - Detail oriented]]
  - [[http://tumbleforth.hardcoded.net/][Tumble Forth]]
  - [[https://www.cs.purdue.edu/homes/rompf/papers/xhebraj-ecoop22.pdf][What If We Don't Pop the Stack? The Return of 2nd-Class Values - xhebraj-ecoop22.pdf]]
  - [[http://mumble.net/~jar/pubs/secureos/secureos.html][Emergent Technologies Inc. -- Security Kernel]]
  - [[https://dotat.at/@/2005-10-20-mergesort-for-linked-lists.html][mergesort for linked lists – Tony Finch]]
  - [[https://web.archive.org/web/20200223051632/http://home.pipeline.com/~hbaker1/CheneyMTA.html][Cheney on the M.T.A.]]
  - [[https://matt.might.net/articles/cps-conversion/][How to compile with continuations]]
  - [[https://web.archive.org/web/20200109080303/http://home.pipeline.com/~hbaker1/ObjectIdentity.html][ACM OOPS Messenger 4, 4 (Oct 1993), 2-27]]
  - [[http://www.iro.umontreal.ca/~feeley/papers/OLearyFeeleyMOREVMS23.pdf][A Compact and Extensible Portable Scheme VM - OLearyFeeleyMOREVMS23.pdf]]
  - [[https://sourceware.org/gdb/current/onlinedocs/gdb.html/Memory.html#Memory][Memory (Debugging with GDB)]]
  - [[https://azeria-labs.com/memory-instructions-load-and-store-part-4/][Memory Instructions: Load and Store (Part 4) | Azeria Labs]]
  - [[https://github.com/BaseMax/AwesomeInterpreter][BaseMax/AwesomeInterpreter: The Big list of the github, open-source interpreters.]]
  - [[https://github.com/arkanis/lisp.c/blob/master/bytecode_interpreter.c][lisp.c/bytecode_interpreter.c at master · arkanis/lisp.c]]
  - [[https://github.com/rm-hull/byok][rm-hull/byok: A bare-metal x86 Forth interpreter & compiler]]
  - [[http://metamodular.com/SICL/call-site-optimization.pdf][Call-site optimization for Common Lisp - call-site-optimization.pdf]]
  - [[https://github.com/egallesio/STklos/blob/master/src/vm.c][STklos/src/vm.c at master · egallesio/STklos]]
  - [[https://www.microsoft.com/en-us/research/publication/what-about-the-integer-numbers-fast-arithmetic-with-tagged-integers-a-plea-for-hardware-support/][What About the Integer Numbers? Fast Arithmetic with Tagged Integers - A Plea for Hardware Support - Microsoft Research]]
  - [[https://www.sparkfun.com/products/14643?src=raspberrypi][Raspberry Pi 3 B+ - DEV-14643 - SparkFun Electronics]]
  - [[https://www.gnu.org/software/guile/manual/html_node/Bitwise-Operations.html][Bitwise Operations (Guile Reference Manual)]]
  - [[https://github.com/s-matyukevich/raspberry-pi-os/tree/master/src/lesson01/src][raspberry-pi-os/src/lesson01/src at master · s-matyukevich/raspberry-pi-os]]
  - [[https://stackoverflow.com/questions/2770889/how-can-i-examine-the-stack-frame-with-gdb][How can I examine the stack frame with GDB? - Stack Overflow]]
  - [[https://kagi.com/search?q=fast+bytecode+number+representations][fast bytecode number representations - Kagi Search]]

** Devlog
*** <2025-02-22 Sat>

Getting further; the expander can, you know, expand. Not to anything useful, but it's getting there.

#+begin_src scheme
  (import (scheme base))
  (import (scheme write))
  (import (gigi core))

  (import (gigi expander context))
  (import (gigi expander core))
  (import (gigi expander scopes+binding-tables))
  (import (gigi expander syntax))
  (import (gigi expander))

  (define t (datum->syntax
             '((lambda (a b)
                 (if (< (- a b) 0)
                     'bigger
                     (do-something-else a)))
               10 15)
             scopeset/core))

  (datum->syntax (syntax->datum (expand t)))

  ; expands to

  '((%lambda (a b)
             (%apply (%free if)
                     (%apply (%free <) (%apply (%free -) (%free a) (%free b)) 0)
                     (%apply (%free quote) (%free bigger))
                     (%apply (%free do-something-else) (%free a))))
    10 15)
#+end_src

Obviously this is incorrect, but the pieces are starting to come together. The ~%free~ ~a~ and ~b~ are
because I'm not currently adding the lambda body scope to the actual syntax.

I changed ~syntax-map~ to take an additional context parameter, which lets ~expand~ just become
~syntax-map~ over ~expand-syntax~ and because the recursion continuation is passed along, we don't
have to let the core-bindings and expander modules see each other.

I don't think that matters very much, but it does help play out some thoughts I'm having about
dynamic scope, effect handlers and how they play into object capabilities.

I need to deep dive on this, but in the very short term:

#+begin_src scheme
  (effect custom/logger (proto/logger/default)
    (on proto/logger/write (level message)
      (some custom logging)))

  (with-handlers ((proto/logger custom/logger))
    (proto/logger debug "oh no!"))
#+end_src

I've rewritten that a bunch of times, which makes me realize that I don't know
what I'm actually looking for.

That's a problem to come back to once I have the expander, because once that's
done I'll need to decide on ISA and how the VM actually runs, which I want to
specialize to the multi-effect/object-capabilities/async model I've got in vague mind.

*** <2025-02-21 Fri> [1/3]

The big piece of understanding is that scopeset+scopes let the lexical stack
of scopes become a graph, not a tree; because of the way that macros can move
things around, we have to figure out the scopes _up front_ and tie them to syntax,
so that when syntax moves, the scopes do too.

See the tests in ~gigi/expander/scopes+bindings.test.scm~, but it's making sense there.

Next up,

- [ ] filling out syntax, so we can build up syntax trees with scopes attached
  - scopeset management for syntax
    - add scope recursively
    - xor scope recursively
 
- [ ] there's an ambiguity case in mflatt's version that I can't seem to figure out how to
  trigger; since I'm being more explicit in storing bindings in a hash table, it may not be
  necessary, but it's also possible I'm missing something.

  - his ambiguity check is that the chosen scope in ~binding-resolve~ is a subset of all possibilities,
    but I _think_ that's already guaranteed by the subset check in ~binding-resolve*~
    - something to figure out, either way
  
- [X] adding a payload to bindings
  - when we're actually doing syntax expansion, we'll want to be able to record things about the bindings;
    - module level binding?
      - phase, import path, etc
    - local binding?
      - key for lookup
    - runtime binding?

  - but I don't want to record this stuff directly on the binding, because that's gross
    - so either bindings should have a payload, which can be arbitrary
      - which then means that bindings are still a list
    - or there's a binding to ~syntax-binding~ table around somewhere
    - or there's a syntax-binding that is a binding+payload somehow

  - actually, I got it wrong
    - a binding-table is what's associated with scopesets
    - a _binding_ is what's _in_ that table, which can come from somewhere else

- at this point, we have syntax with bindings that can correctly reference compile-time value

  - expand form
    - context =
      - environment with core forms
      - phase 0
    - expand-with-context form context

  - expand-with-context
    - immediate values
      - just expand
      - quote-syntax needs to happen
    - identifiers
      - lookup in bindings, free-variable if not found
      - runtime-value?, return identifier
      - other?
    - pairs (applications)
      - if car is identifier
        - lookup in bindings, free-variable if not found
        - procedure?, (expand-with-context (macro-invoke ...
        - runtime-value? return application form
        - other?
      - otherwise, recurse into forms

  - what's missing from this?
    - expansion-time environment (can just be an alist)
    - typed bindings
      - core-forms
        - core primitives from mflatt's version are really just core forms that use identity as a transformer
      - local binding
        - key -> binding
        - [ ] this has something to do with making sure that compile-time values don't get relied on in 

*** <2025-02-17 Mon>

https://www.youtube.com/watch?v=Or_yKiI3Ha4
https://github.com/mflatt/expander/tree/demi?tab=readme-ov-file

going through the =demi= branch 

- syntax object
  - expr     (nested with syntax objects)
  - scopeset (see video)
  - srcloc
  - syntax properties

- scopes
  - set of opaque tags, used to handle shadowing and references
  - output means that downstream already has all scoping handled
  - see the video

  - multiscope (scopes)
    - group of scopes, each of which exists only at a specific phase,
      and each in a distinct phase. this infinite group of scopes is realized on demand.
    - used to represent the inside of a module, where bindings in different phases
      are distinguished by the different scopes within the module's multi scope
    - to compute a syntax's set of scopes at a given phase,
      the phase specific representative of the multiscope is combined with the phase-indpendent scopes
      since a multiscope corresponds to a module, the number of multiscopes in a syntax should be small

- binding
  - a binding from syntax to a value
  - a binding can be
    - module binding
      - (module phase sym nominal-module nominal-phase nominal-sym nominal-require-phase)
      - still trying to figure these out
    - local binding
      - (key), which is looked up in a separate environment
        - so that expanded programs can't depend on compile-time bindings

  - add-local-binding id phase
    - generate a new key for the binding
    - add a new (local-binding key) to the given phase[id.syntax-e]
      - return the key

  - free-identifier=? a b phase
    - resolve both stx against the given phase
    - if both module bindings
      - eq if same sym, phase and module
    - if both local bindings
      - eq if same key
    - otherwise
      ; i think this is the case where it's a runtime binding, but I'm not sure
      - eq if both couldn't be resolved and the symbol is the same

  - expansion time environment
    - maps keys to
      - compile-time value
        - transformers (host-level procedures)
        - primitive forms (lambda, let, etc.)
          - anything that's not in this list would need to come from a transformer
      - 'variable token (meaning it's a runtime value)
      - 'missing token (meaning the key is unbound)
    
  - core form is a struct that represents how to expand the source language's core forms
    - (expander)

  - (binding-lookup b env ns phase id)
    - if module binding,
      - try and get as a transformer
      - if not a transformer, return 'variable, because it's a runtime value
        - this is an assumption based on the default return of `namespace-get-transformer in the code
        - because it doesn't makes sense otherwise
    - if local binding
      - lookup the key in the env
        - missing is an error "id used out of context"
    - otherwise is an error "unknown binding for lookup"

      ; a namespace is the actual set of scopes we're running in
  - namespace
    - scope ; for top level bindings
    - phases ; phase-level -> definitions
    - decls  ; resolved-module-name -> module
    - subdecls ; resolved-module-name -> module
    - instances ; (cons resolved-module-name phase) -> namespace

      ; ???
  - definitions
    - variables ; sym -> val
    - transformers ; sym -> val
    - instantiated?

      ; a module is a map of bindings by phase
      ; we instantiate a module _into_ a namespace
  - module
    - name
    - requires ; phase -> list of resolved module names
    - provides  ; phase-level -> sym -> binding
    - min-phase-level
    - max-phase-level
    - instantiate ; namespace phase phase-level ->

  - current-namespace is a parameter (dynamic scoping with `parameterize)
  - make-module-namespace ns name for-submodule?
    - makes a copy of the incoming module
    - adds ns instances list: ((name phase=0) . copy)

  - (namespace-module-instatiate! ns name phase-shift [min-phase 0])
    - get module by (namespace->module-namespace ns name phase-shift :auto-create)
    - for each (req-phase, req-module) in module-requires
      - instantiate req-module in (req-phase + phase-shift)
    - for each phase in module's phase-min...phase-max+!
      - when phase >= min-phase
        - unless namespace/phase definitions have been instantiated already
          - mark defs instantiated
          - ((module-instantiate mod) ns phase-shift phase-level)

  - namespace->module-namespace ns name phase :auto-create?
    - look up by name/phase in the namespace's module instance cache
    - if auto-create?
      - get module from namespace
      - create new namespace
        - empty multiscope
        - copied decls and instances from ns
      - set by name/phase in namespace's module instance cache

  - expand s ctx
    - identifier? => expand-identifier
    - application - direct identifier in car => expand-id-application-form
    - application - expression in car => expand-implicit #%app
    - otherwise => expand-implicit #%datum

    ; ident
  - expand-identifier s ctx
    - binding = (resolve s (expand-context-phase ctx))
    - if binding
      - variable or form with identifier macro
        (dispatch (lookup binding ctx s) s ctx)
    - if no binding
      - unbound identifier => expand-implicit %#top

    ; (ident formals ...)
  - expand-id-application-form s ctx
    - binding = (resolve (car s) (expand-context-phase ctx))
    - if binding
      - t = (lookup binding ctx d)
        - if variable? t
          ; the expression in the head is a run-time binding, so it's a normal application
          - expand-implicit #%app
        - otherwise
          ; it's syntax or a core form being applied
          - (dispatch t s ctx)
    - if no binding
      - ; it's possible that the #%app form might do something with unbound ids
        - expand-implicit #%app

    ; handle implicit: #%app, #%top, #%datum
    ; does some funky stuff to ensure that these are bound in the core, but that's the #lang stuff poking through I think
  - expand-implicit sym s ctx
    - binding     = resolve (datum->syntax s sym) (expand-context-phase ctx)
    - transformer = binding && (lookup binding ctx id)
    - case transformer
      - core-form?   => (dispatch t (datum-syntax s (cons sym s) s) ctx)
        - with special case for "only-immediate?" returning the syntax
      - transformer? => (dispatch t (datum-syntax s (cons sym s) s) ctx)
      - otherwise
        - error: no transformer binding for name

    ; expand s given a binding to some compile-time value
  - dispatch t s ctx
    - case t
      - core-form? => ((core-form-expander t) s ctx)
        - with special case for "only-immediate?" returning the syntax
      - transformer? => (expand (apply-transformer t s ctx) ctx) ; recursion!!!
      - variable? => s ; expands to itself, because it's a runtime value
      - otherwise
        - error: illegal use of syntax

  - apply-transformer t s ctx
    - transform-scope = create new scope
    - add new scope to s
    - maybe add use-site-scope
      - in a recursive definition context where use-site scopes are needed, create one and add
    - transformed = (parameterize ([current-expand-context ctx])
                      (t maybe-use-site-scope))
    - if not syntax? transformed
      - error "transformer must produce syntax!"
    - xor the transform-scope
      - now, newly introduced syntax has it, and the original syntax doesn't
    - maybe add post-use-site-scope
      - in a definition context where inside-edge scopes are needed, create one and add
        - this way, if the macro expands to a definition, the binding will be in the definition context's scope

  - lookup binding ctx id
    - do a normal binding lookup, but in the current expand-context        

    ; expands a sequence of body forms in a definition contxet
  - expand-body sc s ctx
    - outside-edge = new-scope
      - the outside edge scope identifies the original content of the definition context
    - inside-edge  = new-scope
      - the inside edge scope identifes any form that appears (perhaps through expansion) in the definition context
    - for each body
      - add scopes (sc, outside-edge, inside-edge)
    - phase = expand-context phase
    - body-ctx = copy of expand-context
      - only-immediate? = true ; we don't want to expand the whole thing, just get top-level forms
      - post-expansion-scope = inside-edge
      - scopes (list* ouside-sc inside-sc (expand-context-scopes ctx))
      - use-site-scopes (box null)
    - dups = make dupe checker
    - loop over each body, accumulating expressions and bindings
      - case body
        - not null?
          - expanded-body = (expand body body-ctx)
          - case (core-form-sym expanded-body phase)
            - (begin e ...)
              - splice body forms into expressions, continue
            - (define-values (id ...) rhs)
              - find a variable definition, add bindings, extend env and continue
              - for each id
                - remove use-site-scopes
                - check for dupes in the dupe checker
                - add a local binding for the id to the phase
              - splice new expressions and continue
                - if we had accumulated expressions, we need to turn each into a
                  (defined-values () (begin <expr> (values))) form
                  so it can be kept with definitions to preserve order
            - (define-syntaxes (id ...) rhs)
              - found a macro definition; add bindings, evaluate the compile-time rhs
                install the compile-time values in the env and continue
              - keys = for each id
                - remove use-site scopes
                - check for dupes
                - add local binding for the id to the phase
              - vals = (eval-for-syntaxes-binding rhs ids ctx)
              - extend the environment with key->val bindings
              - extend the expand-context env and continue
            - otherwise
              - found an expression, accumulate and continue
        - body is null?
          - we've expanded everything at the top level, so we finish be rewriting to letrec-values
          - if empty, no wrapper needed
          - otherwise, add letrec-values wrapper, finish expanding the rhs and finish the body expression

  - expand-transformer
    expands s as a compile-time expression relative to the current expansion context

  - expand+eval-for-syntaxes-binding rhs ids ctx)
    - expanded-rhs = (expand rhs ctx)
    - values (expanded-rhs (eval-for-bindings ids expanded-rhs (add1 phase) expand-context-namespace)
    
  - eval-for-bindings
    - compiled = compile s ns phase
    - expand-time-eval compiled
           
  - lambda-expander s formals bodys ctx
    - sc = new scope
    - parse and check formal arguments
      - parse-and-flatten-formals formals sc
      - check no dups
    - keys = add bindings to the current expand context phase
    - body-env = fold over those bindings, env-extending with key 'variable
      - since they're runtime values
    - expanded-body = expand-body sc s body-ctx
      ; return formals with new scope and the expanded body
    - (values (add-scope formals sc) exp-body)

  - add-core-form! `(lambda ,formals ,bodys ...+) (s ctx)
    - formals, body = lambda-expander s formals bodys ctx
    - rebuild `(lambda ,formals ,body)
    
  - add-core-form! `(case-lambda [formalss bodys ...+] ...) (s ctx)
    - for formal, body in formals, bodys
      - formals, body = lambda-expander s formals bodys
        - clause = rebuild clause `[,formals ,body]
    - `(case-lambda ,@clauses)

  - parse-and-flatten-formals all-formals sc

  ; common expansion for `let[rec]-[syntaxes+]values
  ; let-values - binds (values) in body
  ; letrec-values - binds (values) in body in a mutually recursive fashion
  ; let-syntaxes+values - binds transformers and values in body
  ; letrec-syntaxes+values - binds transformers and values in body in a mutually recursive fashion
    
  - ((let-values-expander syntaxes? rec?) s ctx)
    - `(let[rec]-syntaxes+values
           ([(trans-id ...) trans-rhs] ...)
           ([(val-id ...) val-rhs] ...)
         body ...+)
    - `(let[rec]-values
           ([(trans-id ...) trans-rhs] ...)
           ([(val-id ...) val-rhs] ...)
         body ...+)
    - scope = new scope
    - add the new scope to each binding id
      - map (curry add-scope sc) trans-id
      - map (curry add-scope sc) val-id
    - check dupes
    - binding each left hand identifier and generate a key in the env
      trans-keys = map add-local-binding id phase
      val-keys = map add-local-binding id phase
    - evaluate compile time expressions
      trans-vals = map eval-for-syntaxes-binding (add-scope rhs sc) ids ctx
    - build up expansion time environment
      - rec-val-env = for each key in val-keys, extend env key -> 'variable
      - rec-env     = for each key/value in trans and vals, extend rec-val-env with key -> val
    - expand rhs and body
      - new expand contxet with rec-env and new scopes
      - letrec-values-id = if syntaxes? `let-values+phase1 else `let-values
      - rebuild `(,letrec-values-id ,for-each val [id (if rec? (expand+sc rec-ctx) else (expand ctx))))

  - add-core-form `let-values ^
  - add-core-form `letrec-values ^
  - add-core-form `letrec-syntax+values ^
        
  - add-core-form #%datum
    - when the datum is keyword?
      (error "keyword misused as an expression")
    - rebuild as `(quote ,datum)
      - quote is syntax at the current phase level

  - add-core-form (#%app rator rand ...)
    - rebuild as `(,app-id ,(expand rator ctx) ,(map expand rand))

  - add-core-form `(quote ,datum) => datum
  - add-core-form `(quote-syntax ,datum #:local)
    - if not local, prune datum's scopes up to transformer boundary
    - `(quote-syntax ,datum)

  - add-core-form `(if tst thn els)
    - rebuild `(if ,(expand tst) ,(expand thn) ,(expand els))

  - add-core-form `with-continuation-mark ,key ,val ,body
    - rebuild expanding key, val, body

  - add-core-form `begin `begin0
    - it's just map expand bodies

  - add-core-form `set! id rhs
    - binding = resolve id (expand-context-phase ctx)
    - unless binding
      - error "no binding for assignment"
    - t = lookup binding ctx s
      - unless variable? t
        - error "cannot assign to syntax"
      - rebuild `(set! ,id ,(expand rhs ctx))

*** <2025-02-16 Sun>

rough outline of a plan

- compiler
  - reads a file into s-expr
  - s-expr -> module graph
    - imports/exports
    - local definitions
      - s-expr
      - bytecode
    macro expansion phasing comes into play here, not sure how yet
  - local definitions compiled to bytecode
    - macro expansion
    - cps transform
    - optimizations
      - beta reduction
      - constants and simple math
      - others ???
    - ??? -> bytecode
